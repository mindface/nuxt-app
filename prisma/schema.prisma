
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int    @id @default(autoincrement())
  name  String
  email String @unique
  password   String
  detail  String
  status  String
  role       String   @default("user")
  isActive   Boolean  @default(true)
  lastLogin  DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  tasks    Task[]
  TaskEvaluations TaskEvaluation[]
  images Image[]
}

model Task {
  id        Int      @id @default(autoincrement())
  title     String
  status    String   @default("pending")
  detail    String?
  evaluationFactor Float    @default(1.0)
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  evaluations TaskEvaluation[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TaskEvaluation {
  id        Int      @id @default(autoincrement())
  taskId    Int
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content   String
  effect    String?
  accuracy  Float    @default(1.0)
  impact    Float    @default(1.0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tags      TaskEvaluationTag[]
}

model TaskEvaluationTag {
  id               Int             @id @default(autoincrement())
  taskEvaluationId Int
  tagId            Int
  taskEvaluation   TaskEvaluation  @relation(fields: [taskEvaluationId], references: [id], onDelete: Cascade)
  tag             EvaluationTag   @relation(fields: [tagId], references: [id], onDelete: Cascade)

  createdAt       DateTime @default(now())
}

model EvaluationTag {
  id       Int    @id @default(autoincrement())
  key      String @unique
  industry String
  label    String

  taskEvaluations TaskEvaluationTag[]
}

model Image {
  id              Int      @id @default(autoincrement())
  typekey         String
  path            String
  altText         String
  caption         String
  evaluationFactor Float
  status          String
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
